随着硬件指令集的发展，我们可以使用基于冲突检测的乐观并发策略：先进行操作，
如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施（不断地重试，直到成功为止）。
这种乐观的并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。

1.CAS 比较和交换
  乐观锁需要操作和冲突检测这两个步骤具备原子性，这里不能使用互斥同步保证，即使用硬件完成。
  3个操作数：内存地址V，旧的预期值A ，新值B。 只有当V的值等于A，才将V的值更新至B。

2.AtomicInteger
  juc里面的整数原子类AtomicInteger方法调用了unsafe类的CAS操作。
  public final int incrementAndGet() {
      return unsafe.getAndAddInt(this, valueOffset, 1) + 1;
  }

  var1 指示对象内存地址，var2 指示该字段相对对象内存地址的偏移，var4 指示操作需要加的数值，这里为 1。
  通过 getIntVolatile(var1, var2) 得到旧的预期值，通过调用 compareAndSwapInt() 来进行 CAS 比较，
  如果该字段内存地址中的值等于 var5，那么就更新内存地址为 var1+var2 的变量为 var5+var4。
  发生冲突就是不停的重试。
  public final int getAndAddInt(Object var1, long var2, int var4) {
      int var5;
      do {
          var5 = this.getIntVolatile(var1, var2);
      } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));

      return var5;
  }

3.ABA
  如果一个变量初次读取的值时候是A，被改成了B，后来又被改成了A，那么CAS会误认为它没有被改变过。
  J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，
  它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，
  如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。